package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    OpIterator childern1, childern2;

    Tuple current1=null;

    JoinPredicate predicatator;

    TupleDesc tupleDesc;

    ArrayList<Tuple> tupleList;



    private static final long serialVersionUID = 1L;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     *
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
        predicatator = p;
        childern1 = child1;
        childern2 = child2;
        tupleDesc = TupleDesc.merge(childern1.getTupleDesc(),childern2.getTupleDesc());
        tupleList = new ArrayList<>();
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return predicatator;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return childern1.getTupleDesc().getFieldName(predicatator.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return childern2.getTupleDesc().getFieldName(predicatator.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return tupleDesc;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        super.open();




        childern1.open();
        childern2.open();
    }

    public void close() {
        // some code goes here
        super.close();
        childern1.close();
        childern2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        childern1.rewind();
        childern2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here

        while (childern1.hasNext() || current1 != null){

            Tuple left;
            if (current1 == null) {
                current1 = childern1.next();
                left = current1;
            }else {
                left = current1;
            }
            while(childern2.hasNext()){
                Tuple right = childern2.next();
                if(predicatator.filter(left,right)){
                    Tuple tuple = joinTuples(left,right);
                    tupleList.add(tuple);
                    return tuple;
                }
            }
            current1 = null;
            childern2.rewind();
        }
        return null;
    }

    public Tuple joinTuples(Tuple left, Tuple right){

        Tuple joinedTuple = new Tuple(tupleDesc);
        int number = tupleDesc.numFields();
        for(int i =0; i< left.getTupleDesc().numFields();i+=1){
            joinedTuple.setField(i,left.getField(i));
        }

        for(int i =left.getTupleDesc().numFields(); i<number; i+=1){
            joinedTuple.setField(i,right.getField(i-left.getTupleDesc().numFields()));
        }

        return joinedTuple;

    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        OpIterator[] twoChildren = {childern1,childern2};
        return twoChildren;
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
        childern1 = children[0];
        childern2 = children[1];
    }

}
